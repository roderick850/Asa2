"""
Di√°logo de configuraciones avanzadas de la aplicaci√≥n
"""

import customtkinter as ctk
import tkinter as tk
import tkinter.filedialog as fd
from tkinter import ttk
from pathlib import Path
from .custom_dialogs import show_info, show_warning, show_error, ask_yes_no


class AdvancedSettingsDialog:
    """Di√°logo para configuraciones avanzadas de la aplicaci√≥n"""
    
    def __init__(self, parent, app_settings, logger):
        self.parent = parent
        self.app_settings = app_settings
        self.logger = logger
        self.dialog = None
        self.changes_made = False
        self._theme_change_in_progress = False
        
    def show(self):
        """Mostrar el di√°logo de configuraciones"""
        if self.dialog is not None:
            self.dialog.lift()
            return
            
        self.dialog = ctk.CTkToplevel(self.parent)
        self.dialog.title("‚öôÔ∏è Configuraciones Avanzadas - Ark Server Manager")
        self.dialog.geometry("800x600")
        self.dialog.transient(self.parent)
        self.dialog.grab_set()
        
        # Configurar icono
        try:
            icon_path = Path(__file__).parent.parent.parent / "ico" / "ArkManager.ico"
            if icon_path.exists():
                self.dialog.wm_iconbitmap(str(icon_path))
        except Exception:
            pass  # Ignorar errores de icono en di√°logos
        
        # Centrar en pantalla
        self.dialog.geometry("+300+150")
        
        # Configurar el grid
        self.dialog.grid_columnconfigure(0, weight=1)
        self.dialog.grid_rowconfigure(0, weight=1)
        
        # Crear notebook para categor√≠as
        self.notebook = ctk.CTkTabview(self.dialog)
        self.notebook.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)
        
        # Crear pesta√±as
        self.create_startup_tab()
        self.create_behavior_tab()
        self.create_interface_tab()
        
        # Frame de botones
        buttons_frame = ctk.CTkFrame(self.dialog)
        buttons_frame.grid(row=1, column=0, sticky="ew", padx=10, pady=(0, 10))
        buttons_frame.grid_columnconfigure(1, weight=1)
        
        # Botones
        ctk.CTkButton(
            buttons_frame,
            text="üíæ Guardar",
            command=self.save_settings,
            width=120
        ).grid(row=0, column=0, padx=(10, 5), pady=10)
        
        ctk.CTkButton(
            buttons_frame,
            text="üîç Verificar",
            command=self.verify_settings_integrity,
            width=120
        ).grid(row=0, column=1, padx=5, pady=10)
        
        ctk.CTkButton(
            buttons_frame,
            text="üîÑ Restablecer",
            command=self.reset_settings,
            width=120
        ).grid(row=0, column=2, padx=5, pady=10)
        
        ctk.CTkButton(
            buttons_frame,
            text="üì§ Exportar",
            command=self.export_settings,
            width=120
        ).grid(row=0, column=3, padx=5, pady=10)
        
        ctk.CTkButton(
            buttons_frame,
            text="üì• Importar",
            command=self.import_settings,
            width=120
        ).grid(row=0, column=4, padx=5, pady=10)
        
        ctk.CTkButton(
            buttons_frame,
            text="‚ùå Cancelar",
            command=self.close_dialog,
            width=120
        ).grid(row=0, column=5, padx=(5, 10), pady=10)
        
        # Manejar cierre de ventana
        self.dialog.protocol("WM_DELETE_WINDOW", self.close_dialog)
        
        # NO cargar configuraciones autom√°ticamente al abrir
        # self.load_current_settings()
        
    def create_startup_tab(self):
        """Crear pesta√±a de configuraciones de inicio"""
        tab = self.notebook.add("üöÄ Inicio")
        
        # Frame principal con scroll
        main_frame = ctk.CTkScrollableFrame(tab)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # T√≠tulo
        ctk.CTkLabel(
            main_frame,
            text="Configuraciones de Inicio del Sistema",
            font=("Arial", 16, "bold")
        ).pack(pady=(0, 20))
        
        # Cargar configuraciones autom√°ticamente al mostrar la pesta√±a
        self.load_current_settings()
        
        # Inicio con Windows
        startup_frame = ctk.CTkFrame(main_frame)
        startup_frame.pack(fill="x", pady=5)
        
        self.startup_var = ctk.BooleanVar(value=False)  # Valor por defecto, no cargar autom√°ticamente
        startup_switch = ctk.CTkSwitch(
            startup_frame,
            text="üñ•Ô∏è Iniciar con Windows",
            variable=self.startup_var,
            command=self.on_startup_toggle
        )
        startup_switch.pack(side="left", padx=10, pady=10)
        
        ctk.CTkLabel(
            startup_frame,
            text="Inicia la aplicaci√≥n autom√°ticamente cuando Windows se inicie",
            text_color="gray"
        ).pack(side="left", padx=(10, 0), pady=10)
        
        # Auto-start servidor (manual)
        autostart_frame = ctk.CTkFrame(main_frame)
        autostart_frame.pack(fill="x", pady=5)
        
        self.autostart_var = ctk.BooleanVar(value=False)  # Valor por defecto, no cargar autom√°ticamente
        ctk.CTkSwitch(
            autostart_frame,
            text="üéÆ Auto-iniciar servidor (Manual)",
            variable=self.autostart_var
        ).pack(side="left", padx=10, pady=10)
        
        ctk.CTkLabel(
            autostart_frame,
            text="Inicia autom√°ticamente el servidor al abrir la aplicaci√≥n manualmente",
            text_color="gray"
        ).pack(side="left", padx=(10, 0), pady=10)
        
        # Auto-start servidor (con Windows)
        autostart_windows_frame = ctk.CTkFrame(main_frame)
        autostart_windows_frame.pack(fill="x", pady=5)
        
        self.autostart_windows_var = ctk.BooleanVar(value=False)  # Valor por defecto, no cargar autom√°ticamente
        ctk.CTkSwitch(
            autostart_windows_frame,
            text="üñ•Ô∏è Auto-iniciar servidor (Con Windows)",
            variable=self.autostart_windows_var
        ).pack(side="left", padx=10, pady=10)
        
        ctk.CTkLabel(
            autostart_windows_frame,
            text="Inicia autom√°ticamente el servidor cuando la aplicaci√≥n arranca con Windows",
            text_color="gray"
        ).pack(side="left", padx=(10, 0), pady=10)
        
        # Minimizar al iniciar
        minimize_frame = ctk.CTkFrame(main_frame)
        minimize_frame.pack(fill="x", pady=5)
        
        self.start_minimized_var = ctk.BooleanVar(value=False)  # Valor por defecto, no cargar autom√°ticamente
        ctk.CTkSwitch(
            minimize_frame,
            text="üì¶ Iniciar minimizado",
            variable=self.start_minimized_var
        ).pack(side="left", padx=10, pady=10)
        
        ctk.CTkLabel(
            minimize_frame,
            text="Inicia la aplicaci√≥n minimizada en la bandeja del sistema",
            text_color="gray"
        ).pack(side="left", padx=(10, 0), pady=10)
        
        # Auto backup al iniciar
        backup_frame = ctk.CTkFrame(main_frame)
        backup_frame.pack(fill="x", pady=5)
        
        self.auto_backup_var = ctk.BooleanVar(value=False)  # Valor por defecto, no cargar autom√°ticamente
        ctk.CTkSwitch(
            backup_frame,
            text="üíæ Auto-backup al iniciar",
            variable=self.auto_backup_var
        ).pack(side="left", padx=10, pady=10)
        
        ctk.CTkLabel(
            backup_frame,
            text="Realiza un backup autom√°tico al iniciar la aplicaci√≥n",
            text_color="gray"
        ).pack(side="left", padx=(10, 0), pady=10)
        
    def create_behavior_tab(self):
        """Crear pesta√±a de comportamiento"""
        tab = self.notebook.add("üéØ Comportamiento")
        
        main_frame = ctk.CTkScrollableFrame(tab)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # T√≠tulo
        ctk.CTkLabel(
            main_frame,
            text="Comportamiento de la Aplicaci√≥n",
            font=("Arial", 16, "bold")
        ).pack(pady=(0, 20))
        
        # Minimizar a bandeja
        tray_frame = ctk.CTkFrame(main_frame)
        tray_frame.pack(fill="x", pady=5)
        
        self.minimize_tray_var = ctk.BooleanVar(value=False)  # Valor por defecto, no cargar autom√°ticamente
        ctk.CTkSwitch(
            tray_frame,
            text="üìÆ Minimizar a bandeja",
            variable=self.minimize_tray_var
        ).pack(side="left", padx=10, pady=10)
        
        ctk.CTkLabel(
            tray_frame,
            text="Minimiza a la bandeja del sistema en lugar de la barra de tareas",
            text_color="gray"
        ).pack(side="left", padx=(10, 0), pady=10)
        
        # Cerrar a bandeja
        close_tray_frame = ctk.CTkFrame(main_frame)
        close_tray_frame.pack(fill="x", pady=5)
        
        self.close_tray_var = ctk.BooleanVar(value=False)  # Valor por defecto, no cargar autom√°ticamente
        ctk.CTkSwitch(
            close_tray_frame,
            text="üîí Cerrar a bandeja",
            variable=self.close_tray_var
        ).pack(side="left", padx=10, pady=10)
        
        ctk.CTkLabel(
            close_tray_frame,
            text="Al cerrar la ventana, mantiene la app ejecut√°ndose en la bandeja",
            text_color="gray"
        ).pack(side="left", padx=(10, 0), pady=10)
        
        # Confirmar salida
        confirm_frame = ctk.CTkFrame(main_frame)
        confirm_frame.pack(fill="x", pady=5)
        
        self.confirm_exit_var = ctk.BooleanVar(value=self.app_settings.get_setting("confirm_exit"))
        ctk.CTkSwitch(
            confirm_frame,
            text="‚ö†Ô∏è Confirmar salida",
            variable=self.confirm_exit_var
        ).pack(side="left", padx=10, pady=10)
        
        ctk.CTkLabel(
            confirm_frame,
            text="Pide confirmaci√≥n antes de cerrar la aplicaci√≥n",
            text_color="gray"
        ).pack(side="left", padx=(10, 0), pady=10)
        
        # Auto-check updates
        updates_frame = ctk.CTkFrame(main_frame)
        updates_frame.pack(fill="x", pady=5)
        
        self.auto_updates_var = ctk.BooleanVar(value=False)  # Valor por defecto, no cargar autom√°ticamente
        ctk.CTkSwitch(
            updates_frame,
            text="üîÑ Verificar actualizaciones",
            variable=self.auto_updates_var
        ).pack(side="left", padx=10, pady=10)
        
        ctk.CTkLabel(
            updates_frame,
            text="Verifica autom√°ticamente si hay actualizaciones disponibles",
            text_color="gray"
        ).pack(side="left", padx=(10, 0), pady=10)
        
        # Auto-save config
        autosave_frame = ctk.CTkFrame(main_frame)
        autosave_frame.pack(fill="x", pady=5)
        
        self.auto_save_var = ctk.BooleanVar(value=False)  # Valor por defecto, no cargar autom√°ticamente
        ctk.CTkSwitch(
            autosave_frame,
            text="üíæ Auto-guardar configuraci√≥n",
            variable=self.auto_save_var
        ).pack(side="left", padx=10, pady=10)
        
        ctk.CTkLabel(
            autosave_frame,
            text="Guarda autom√°ticamente los cambios de configuraci√≥n",
            text_color="gray"
        ).pack(side="left", padx=(10, 0), pady=10)
        
        # Ocultar consola
        console_frame = ctk.CTkFrame(main_frame)
        console_frame.pack(fill="x", pady=5)
        
        self.hide_console_var = ctk.BooleanVar(value=self.app_settings.get_setting("hide_console"))
        ctk.CTkSwitch(
            console_frame,
            text="üñ•Ô∏è Ocultar consola",
            variable=self.hide_console_var
        ).pack(side="left", padx=10, pady=10)
        
        ctk.CTkLabel(
            console_frame,
            text="Oculta la ventana de consola en modo debug",
            text_color="gray"
        ).pack(side="left", padx=(10, 0), pady=10)
        
    def create_interface_tab(self):
        """Crear pesta√±a de interfaz"""
        tab = self.notebook.add("üé® Interfaz")
        
        main_frame = ctk.CTkScrollableFrame(tab)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # T√≠tulo
        ctk.CTkLabel(
            main_frame,
            text="Configuraciones de Interfaz",
            font=("Arial", 16, "bold")
        ).pack(pady=(0, 20))
        
        # Siempre visible
        ontop_frame = ctk.CTkFrame(main_frame)
        ontop_frame.pack(fill="x", pady=5)
        
        self.always_ontop_var = ctk.BooleanVar(value=False)  # Valor por defecto, no cargar autom√°ticamente
        ctk.CTkSwitch(
            ontop_frame,
            text="üìå Siempre visible",
            variable=self.always_ontop_var,
            command=self.on_always_on_top_toggle
        ).pack(side="left", padx=10, pady=10)
        
        ctk.CTkLabel(
            ontop_frame,
            text="Mantiene la ventana siempre por encima de otras aplicaciones",
            text_color="gray"
        ).pack(side="left", padx=(10, 0), pady=10)
        
        # Recordar posici√≥n
        position_frame = ctk.CTkFrame(main_frame)
        position_frame.pack(fill="x", pady=5)
        
        self.remember_position_var = ctk.BooleanVar(value=False)  # Valor por defecto, no cargar autom√°ticamente
        ctk.CTkSwitch(
            position_frame,
            text="üìç Recordar posici√≥n",
            variable=self.remember_position_var
        ).pack(side="left", padx=10, pady=10)
        
        ctk.CTkLabel(
            position_frame,
            text="Recuerda la posici√≥n y tama√±o de la ventana",
            text_color="gray"
        ).pack(side="left", padx=(10, 0), pady=10)
        
        # Tema
        theme_frame = ctk.CTkFrame(main_frame)
        theme_frame.pack(fill="x", pady=5)
        
        ctk.CTkLabel(theme_frame, text="üé® Tema de la aplicaci√≥n:").pack(side="left", padx=10, pady=10)
        
        self.theme_var = ctk.StringVar(value="dark")  # Valor por defecto, no cargar autom√°ticamente
        self.theme_combo = ctk.CTkComboBox(
            theme_frame,
            values=["light", "dark", "system"],
            variable=self.theme_var,
            command=self.on_theme_change
        )
        self.theme_combo.pack(side="left", padx=10, pady=10)
        
        # Label de estado del tema
        self.theme_status_label = ctk.CTkLabel(
            theme_frame,
            text="",
            text_color="gray"
        )
        self.theme_status_label.pack(side="left", padx=(10, 0), pady=10)
        
        # Sonidos de notificaci√≥n
        sound_frame = ctk.CTkFrame(main_frame)
        sound_frame.pack(fill="x", pady=5)
        
        self.notification_sound_var = ctk.BooleanVar(value=False)  # Valor por defecto, no cargar autom√°ticamente
        ctk.CTkSwitch(
            sound_frame,
            text="üîä Sonidos de notificaci√≥n",
            variable=self.notification_sound_var
        ).pack(side="left", padx=10, pady=10)
        
        ctk.CTkLabel(
            sound_frame,
            text="Reproduce sonidos para notificaciones importantes",
            text_color="gray"
        ).pack(side="left", padx=(10, 0), pady=10)
        

    

    





        
    def on_startup_toggle(self):
        """Manejar toggle de inicio con Windows"""
        enabled = self.startup_var.get()
        success = self.app_settings.set_startup_with_windows(enabled)
        if not success:
            # Revertir el switch si fall√≥
            self.startup_var.set(not enabled)
            show_error(
                self.dialog,
                "Error de Permisos",
                "No se pudo configurar el inicio autom√°tico con Windows.\n\n"
                "Posibles soluciones:\n"
                "1. Ejecuta la aplicaci√≥n como administrador\n"
                "2. Verifica que no hay software de seguridad bloqueando\n"
                "3. El sistema intent√≥ usar un m√©todo alternativo (carpeta de inicio)\n\n"
                "Si el problema persiste, configura manualmente el inicio autom√°tico."
            )
    
    def on_always_on_top_toggle(self):
        """Manejar toggle de siempre visible"""
        if hasattr(self.parent, 'attributes'):
            self.parent.attributes('-topmost', self.always_ontop_var.get())
    
    def on_theme_change(self, value):
        """Manejar cambio de tema"""
        try:
            # Evitar cambios m√∫ltiples simult√°neos
            if self._theme_change_in_progress:
                self.logger.warning("Cambio de tema ya en progreso, ignorando...")
                self.theme_status_label.configure(text="‚ö†Ô∏è Cambio en progreso...")
                return
            
            # Mostrar mensaje de confirmaci√≥n
            self.logger.info(f"Cambiando tema a: {value}")
            
            # Actualizar estado visual
            self.theme_status_label.configure(text="üîÑ Cambiando tema...")
            self.theme_combo.configure(state="disabled")
            
            # Marcar cambio en progreso
            self._theme_change_in_progress = True
            
            # Cambiar tema de forma as√≠ncrona para evitar bloqueos
            self.dialog.after(100, lambda: self._apply_theme_change(value))
            self.changes_made = True
            
        except Exception as e:
            self.logger.error(f"Error al preparar cambio de tema: {e}")
            self.theme_status_label.configure(text="‚ùå Error en cambio")
            self._theme_change_in_progress = False
    
    def _apply_theme_change(self, theme_value):
        """Aplicar cambio de tema de forma segura"""
        try:
            # Deshabilitar temporalmente la interfaz
            self.dialog.configure(cursor="wait")
            
            # Aplicar el tema con manejo de errores espec√≠ficos
            self.logger.info(f"Aplicando tema: {theme_value}")
            
            # Intentar cambio de tema con threading para evitar congelamiento
            success = False
            
            # Usar threading para prevenir congelamiento en equipos problem√°ticos
            import threading
            import time
            
            def change_theme_thread():
                nonlocal success
                try:
                    ctk.set_appearance_mode(theme_value)
                    success = True
                except Exception as e:
                    self.logger.warning(f"Error en hilo de cambio de tema: {e}")
                    success = False
            
            # Ejecutar cambio en hilo separado con timeout
            theme_thread = threading.Thread(target=change_theme_thread, daemon=True)
            theme_thread.start()
            theme_thread.join(timeout=3.0)  # Timeout de 3 segundos
            
            # Si el hilo a√∫n est√° vivo, significa que se colg√≥
            if theme_thread.is_alive():
                self.logger.warning("Cambio de tema se colg√≥, intentando m√©todo alternativo...")
                success = False
                
                # Intentar m√©todo directo como fallback
                try:
                    ctk.set_appearance_mode(theme_value)
                    success = True
                    self.logger.info("M√©todo alternativo exitoso")
                except Exception as e:
                    self.logger.error(f"M√©todo alternativo tambi√©n fall√≥: {e}")
            
            if not success:
                raise Exception("No se pudo cambiar el tema - posible incompatibilidad de sistema")
            
            # Forzar actualizaci√≥n de la interfaz
            try:
                self.dialog.update_idletasks()
                if hasattr(self.parent, 'update_idletasks'):
                    self.parent.update_idletasks()
            except Exception as e:
                self.logger.warning(f"Error al actualizar interfaz: {e}")
            
            # Restaurar cursor normal y habilitar cambios futuros
            self.dialog.after(800, lambda: self._finish_theme_change())
            
            self.logger.info(f"Tema cambiado exitosamente a: {theme_value}")
            
        except Exception as e:
            self.logger.error(f"Error cr√≠tico al cambiar tema: {e}")
            self.theme_status_label.configure(text=f"‚ùå Error: {str(e)[:30]}...")
            # Restaurar estado en caso de error
            self._finish_theme_change()
    
    def _finish_theme_change(self):
        """Finalizar el proceso de cambio de tema"""
        try:
            # Restaurar cursor de forma defensiva
            try:
                self.dialog.configure(cursor="")
            except:
                pass
            
            # Habilitar combo de forma defensiva
            try:
                self.theme_combo.configure(state="normal")
            except:
                pass
            
            # Actualizar label de forma defensiva
            try:
                self.theme_status_label.configure(text="‚úÖ Tema aplicado")
            except:
                pass
            
            # Siempre resetear el flag de progreso
            self._theme_change_in_progress = False
            
            # Limpiar mensaje despu√©s de unos segundos
            try:
                self.dialog.after(3000, lambda: self._clear_theme_status())
            except:
                pass
            
        except Exception as e:
            self.logger.error(f"Error al finalizar cambio de tema: {e}")
            # Asegurar que siempre se resetee el estado
            self._theme_change_in_progress = False
            try:
                self.theme_status_label.configure(text="‚ùå Error en cambio")
                self.theme_combo.configure(state="normal")
            except:
                pass
    
    def _clear_theme_status(self):
        """Limpiar el estado del tema de forma segura"""
        try:
            if hasattr(self, 'theme_status_label'):
                self.theme_status_label.configure(text="")
        except:
            pass
    
    def save_settings(self):
        """Guardar todas las configuraciones con verificaci√≥n robusta"""
        try:
            self.logger.info("üîÑ Iniciando proceso de guardado desde di√°logo...")
            
            # Forzar recarga antes de guardar para sincronizar
            self.app_settings.load_settings()
            self.logger.info("‚úÖ Configuraciones recargadas antes de guardar")
            
            # Recopilar todos los valores con verificaci√≥n
            settings_to_save = {
                "startup_with_windows": self.startup_var.get(),
                "auto_start_server": self.autostart_var.get(),
                "auto_start_server_with_windows": self.autostart_windows_var.get(),
                "start_minimized": self.start_minimized_var.get(),
                "auto_backup_on_start": self.auto_backup_var.get(),
                "minimize_to_tray": self.minimize_tray_var.get(),
                "close_to_tray": self.close_tray_var.get(),
                "confirm_exit": self.confirm_exit_var.get(),
                "auto_check_updates": self.auto_updates_var.get(),
                "auto_save_config": self.auto_save_var.get(),
                "always_on_top": self.always_ontop_var.get(),
                "remember_window_position": self.remember_position_var.get(),
                "theme_mode": self.theme_var.get(),
                "notification_sound": self.notification_sound_var.get(),
                "hide_console": self.hide_console_var.get()
            }
            
            self.logger.info(f"üìù Configuraciones recopiladas: {len(settings_to_save)} items")
            
            # Log de configuraciones cr√≠ticas ANTES de aplicar
            critical_settings = ["auto_start_server", "startup_with_windows", "auto_start_server_with_windows"]
            for key in critical_settings:
                if key in settings_to_save:
                    self.logger.info(f"üîç ANTES - {key}: {settings_to_save[key]}")
            
            # Aplicar configuraciones una por una con verificaci√≥n
            successful_sets = 0
            failed_sets = 0
            
            for key, value in settings_to_save.items():
                try:
                    # Verificar valor anterior
                    old_value = self.app_settings.get_setting(key)
                    
                    # Aplicar nuevo valor
                    self.app_settings.set_setting(key, value)
                    
                    # Verificar que se aplic√≥
                    new_value = self.app_settings.get_setting(key)
                    
                    if new_value == value:
                        successful_sets += 1
                        if key in critical_settings:
                            self.logger.info(f"‚úÖ {key}: {old_value} ‚Üí {new_value}")
                    else:
                        failed_sets += 1
                        self.logger.error(f"‚ùå {key}: no se aplic√≥ correctamente (esperado: {value}, actual: {new_value})")
                        
                except Exception as e:
                    failed_sets += 1
                    self.logger.error(f"‚ùå Error al aplicar {key}: {e}")
            
            self.logger.info(f"üìä Aplicaci√≥n: {successful_sets} exitosas, {failed_sets} fallidas")
            
            if failed_sets > 0:
                self.logger.warning(f"‚ö†Ô∏è Algunas configuraciones no se aplicaron correctamente")
            
            # Guardar al archivo con verificaci√≥n
            self.logger.info("üíæ Guardando al archivo...")
            self.app_settings.save_settings()
            self.logger.info("‚úÖ save_settings() completado")
            
            # Verificaci√≥n post-guardado: recargar y verificar
            self.logger.info("üîç Verificando persistencia...")
            self.app_settings.load_settings()
            
            verification_passed = True
            for key in critical_settings:
                if key in settings_to_save:
                    expected_value = settings_to_save[key]
                    actual_value = self.app_settings.get_setting(key)
                    if expected_value == actual_value:
                        self.logger.info(f"‚úÖ VERIFICADO - {key}: {actual_value}")
                    else:
                        self.logger.error(f"‚ùå FALL√ì VERIFICACI√ìN - {key}: esperado {expected_value}, actual {actual_value}")
                        verification_passed = False
            
            if verification_passed:
                self.logger.info("üéâ TODAS LAS CONFIGURACIONES VERIFICADAS EXITOSAMENTE")
                show_info(self.dialog, "√âxito", "‚úÖ Configuraciones guardadas y verificadas correctamente")
            else:
                self.logger.error("‚ùå FALL√ì LA VERIFICACI√ìN DE ALGUNAS CONFIGURACIONES")
                show_warning(self.dialog, "Advertencia", "‚ö†Ô∏è Configuraciones guardadas, pero algunas pueden no haberse aplicado correctamente. Revisa los logs.")
            
            self.changes_made = False
            
            # NO cerrar autom√°ticamente para que el usuario pueda verificar
            # self.close_dialog()
            
        except Exception as e:
            self.logger.error(f"‚ùå Error cr√≠tico al guardar configuraciones: {e}")
            show_error(self.dialog, "Error", f"‚ùå Error cr√≠tico al guardar configuraciones:\n{e}")
    
    def reset_settings(self):
        """Restablecer configuraciones por defecto"""
        if ask_yes_no(
            self.dialog,
            "Confirmar",
            "¬øEst√°s seguro de que quieres restablecer todas las configuraciones a sus valores por defecto?"
        ):
            self.app_settings.reset_to_defaults()
            show_info(self.dialog, "√âxito", "Configuraciones restablecidas. Reinicia la aplicaci√≥n para aplicar todos los cambios.")
            self.close_dialog()
    
    def export_settings(self):
        """Exportar configuraciones"""
        file_path = fd.asksaveasfilename(
            title="Exportar configuraciones",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if file_path:
            if self.app_settings.export_settings(file_path):
                show_info(self.dialog, "√âxito", "Configuraciones exportadas correctamente")
            else:
                show_error(self.dialog, "Error", "Error al exportar configuraciones")
    
    def import_settings(self):
        """Importar configuraciones"""
        file_path = fd.askopenfilename(
            title="Importar configuraciones",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if file_path:
            if self.app_settings.import_settings(file_path):
                show_info(self.dialog, "√âxito", "Configuraciones importadas correctamente. Reinicia la aplicaci√≥n para aplicar todos los cambios.")
                self.close_dialog()
            else:
                show_error(self.dialog, "Error", "Error al importar configuraciones")
    
    def reload_config_file(self):
        """Recargar el archivo config.ini desde el disco"""
        try:
            self.logger.info("üîÑ Iniciando recarga de config.ini...")
            if hasattr(self.app_settings, 'load_settings'):
                self.app_settings.load_settings()
                self.logger.info("‚úÖ Config.ini recargado con √©xito.")
                show_info(self.dialog, "Recarga exitosa", "Archivo config.ini recargado con √©xito.")
            else:
                self.logger.warning("‚ö†Ô∏è AppSettings no tiene m√©todo load_settings, no se puede recargar el archivo.")
                show_warning(self.dialog, "Advertencia", "No se pudo recargar el archivo config.ini. La aplicaci√≥n no tiene un m√©todo para cargar configuraciones.")
        except Exception as e:
            self.logger.error(f"‚ùå Error al recargar config.ini: {e}")
            show_error(self.dialog, "Error", f"‚ùå Error al recargar config.ini:\n{e}")
    
    def load_current_settings(self):
        """Cargar configuraciones actuales en la interfaz"""
        try:
            self.logger.info("üîÑ Iniciando sincronizaci√≥n de configuraciones...")
            
            # Forzar recarga de configuraciones desde archivo
            if hasattr(self.app_settings, 'load_settings'):
                self.app_settings.load_settings()
                self.logger.info("‚úÖ Configuraciones recargadas desde archivo")
            else:
                self.logger.warning("‚ö†Ô∏è AppSettings no tiene m√©todo load_settings")
            
            # Actualizar variables de interfaz con valores actuales
            settings_map = {
                'startup_var': 'startup_with_windows',
                'autostart_var': 'auto_start_server',
                'autostart_windows_var': 'auto_start_server_with_windows',
                'start_minimized_var': 'start_minimized',
                'minimize_tray_var': 'minimize_to_tray',
                'close_tray_var': 'close_to_tray',
                'always_ontop_var': 'always_on_top',
                'remember_position_var': 'remember_window_position',
                'auto_backup_var': 'auto_backup_on_start',
                'confirm_exit_var': 'confirm_exit',
                'auto_save_var': 'auto_save_config',
                'auto_updates_var': 'auto_check_updates',
                'notification_sound_var': 'notification_sound',
                'theme_var': 'theme_mode'
            }
            
            successful_updates = 0
            failed_updates = 0
            
            for var_name, setting_key in settings_map.items():
                if hasattr(self, var_name):
                    try:
                        current_value = self.app_settings.get_setting(setting_key)
                        var_obj = getattr(self, var_name)
                        
                        # Verificar que la variable existe y tiene m√©todo set
                        if hasattr(var_obj, 'set'):
                            old_value = var_obj.get() if hasattr(var_obj, 'get') else "UNKNOWN"
                            var_obj.set(current_value)
                            successful_updates += 1
                            
                            # Log detallado para configuraciones cr√≠ticas
                            if setting_key in ['auto_start_server', 'auto_start_server_with_windows', 'startup_with_windows']:
                                self.logger.info(f"üîÑ {setting_key}: {old_value} ‚Üí {current_value}")
                        else:
                            self.logger.error(f"‚ùå Variable {var_name} no tiene m√©todo set()")
                            failed_updates += 1
                            
                    except Exception as e:
                        self.logger.error(f"‚ùå Error al actualizar {var_name} ({setting_key}): {e}")
                        failed_updates += 1
                else:
                    self.logger.warning(f"‚ö†Ô∏è Variable {var_name} no existe en el di√°logo")
                    failed_updates += 1
            
            self.logger.info(f"‚úÖ Sincronizaci√≥n completada: {successful_updates} exitosas, {failed_updates} fallidas")
                
        except Exception as e:
            self.logger.error(f"‚ùå Error cr√≠tico al cargar configuraciones actuales: {e}")
            # Intentar recarga b√°sica como fallback
            try:
                self.logger.info("üîÑ Intentando recarga b√°sica...")
                if hasattr(self, 'autostart_windows_var') and hasattr(self.app_settings, 'get_setting'):
                    value = self.app_settings.get_setting('auto_start_server_with_windows')
                    self.autostart_windows_var.set(value)
                    self.logger.info(f"üîÑ Recarga b√°sica: auto_start_server_with_windows = {value}")
            except Exception as fallback_error:
                self.logger.error(f"‚ùå Recarga b√°sica fall√≥: {fallback_error}")

    def verify_settings_integrity(self):
        """Verificar la integridad de las configuraciones"""
        try:
            self.logger.info("üîç Iniciando verificaci√≥n de integridad...")
            
            # Recargar configuraciones desde archivo
            self.app_settings.load_settings()
            
            # Verificar que las variables de UI coincidan con app_settings
            critical_mappings = {
                'startup_var': 'startup_with_windows',
                'autostart_var': 'auto_start_server',
                'autostart_windows_var': 'auto_start_server_with_windows'
            }
            
            integrity_ok = True
            
            for var_name, setting_key in critical_mappings.items():
                if hasattr(self, var_name):
                    var_obj = getattr(self, var_name)
                    ui_value = var_obj.get()
                    settings_value = self.app_settings.get_setting(setting_key)
                    
                    if ui_value == settings_value:
                        self.logger.info(f"‚úÖ {setting_key}: UI={ui_value}, Settings={settings_value}")
                    else:
                        self.logger.warning(f"‚ö†Ô∏è {setting_key}: DESINCRONIZADO - UI={ui_value}, Settings={settings_value}")
                        integrity_ok = False
                        
                        # Sincronizar UI con settings
                        var_obj.set(settings_value)
                        self.logger.info(f"üîÑ Sincronizado {setting_key} UI con Settings: {settings_value}")
            
            if integrity_ok:
                self.logger.info("üéâ INTEGRIDAD VERIFICADA: UI y Settings sincronizados")
            else:
                self.logger.warning("‚ö†Ô∏è INTEGRIDAD RESTAURADA: Se aplicaron correcciones")
            
            return integrity_ok
            
        except Exception as e:
            self.logger.error(f"‚ùå Error en verificaci√≥n de integridad: {e}")
            return False

    def close_dialog(self):
        """Cerrar el di√°logo"""
        if self.changes_made:
            if ask_yes_no(self.dialog, "Cambios sin guardar", "Hay cambios sin guardar. ¬øQuieres cerrar sin guardar?"):
                self.dialog.destroy()
                self.dialog = None
        else:
            self.dialog.destroy()
            self.dialog = None
