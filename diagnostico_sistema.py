"""
Script de diagn√≥stico para detectar problemas de compatibilidad
del Ark Server Manager en diferentes equipos
"""

import sys
import os
import platform
import traceback
from pathlib import Path

def print_header(title):
    """Imprimir encabezado con formato"""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")

def print_check(description, status, details=""):
    """Imprimir resultado de verificaci√≥n"""
    status_icon = "‚úÖ" if status else "‚ùå"
    print(f"{status_icon} {description}")
    if details:
        print(f"   ‚îî‚îÄ {details}")

def diagnose_system():
    """Diagnosticar sistema completo"""
    print("üîç DIAGN√ìSTICO DEL SISTEMA - ARK SERVER MANAGER")
    
    # Informaci√≥n del sistema
    print_header("INFORMACI√ìN DEL SISTEMA")
    print(f"üñ•Ô∏è  Sistema Operativo: {platform.system()} {platform.release()}")
    print(f"üèóÔ∏è  Arquitectura: {platform.architecture()[0]}")
    print(f"üêç  Python: {platform.python_version()}")
    print(f"üìÅ  Directorio de trabajo: {os.getcwd()}")
    
    # Verificar Python y m√≥dulos cr√≠ticos
    print_header("VERIFICACI√ìN DE DEPENDENCIAS")
    
    # Lista de m√≥dulos cr√≠ticos
    critical_modules = [
        ('customtkinter', 'Interfaz gr√°fica principal'),
        ('tkinter', 'Biblioteca GUI base'),
        ('PIL', 'Manejo de im√°genes'),
        ('psutil', 'Informaci√≥n del sistema'),
        ('requests', 'Conexiones HTTP'),
        ('schedule', 'Programaci√≥n de tareas'),
        ('pystray', 'Bandeja del sistema'),
        ('win10toast', 'Notificaciones Windows'),
        ('configparser', 'Gesti√≥n de configuraci√≥n'),
        ('pathlib', 'Manejo de rutas'),
        ('threading', 'Hilos de ejecuci√≥n'),
        ('subprocess', 'Ejecuci√≥n de procesos'),
        ('json', 'Serializaci√≥n de datos'),
        ('logging', 'Sistema de logs'),
    ]
    
    for module_name, description in critical_modules:
        try:
            if module_name == 'PIL':
                import PIL
                import PIL.Image
                import PIL.ImageTk
            else:
                __import__(module_name)
            print_check(f"{module_name}: {description}", True)
        except ImportError as e:
            print_check(f"{module_name}: {description}", False, f"Error: {e}")
        except Exception as e:
            print_check(f"{module_name}: {description}", False, f"Error inesperado: {e}")
    
    # Verificar CustomTkinter espec√≠ficamente
    print_header("VERIFICACI√ìN DE CUSTOMTKINTER")
    try:
        import customtkinter as ctk
        print_check("Importaci√≥n de CustomTkinter", True)
        
        # Probar configuraci√≥n de tema
        try:
            original_mode = ctk.get_appearance_mode()
            print_check(f"Tema actual", True, f"'{original_mode}'")
            
            # Probar cambios de tema
            for theme in ['light', 'dark', 'system']:
                try:
                    ctk.set_appearance_mode(theme)
                    current = ctk.get_appearance_mode()
                    print_check(f"Cambio a tema '{theme}'", True, f"Actual: '{current}'")
                except Exception as e:
                    print_check(f"Cambio a tema '{theme}'", False, f"Error: {e}")
            
            # Restaurar tema original
            ctk.set_appearance_mode(original_mode)
            
        except Exception as e:
            print_check("Configuraci√≥n de tema", False, f"Error: {e}")
            
        # Probar creaci√≥n de ventana b√°sica
        try:
            test_window = ctk.CTk()
            test_window.withdraw()  # Ocultar inmediatamente
            test_window.destroy()
            print_check("Creaci√≥n de ventana CTk", True)
        except Exception as e:
            print_check("Creaci√≥n de ventana CTk", False, f"Error: {e}")
            
    except Exception as e:
        print_check("CustomTkinter", False, f"Error cr√≠tico: {e}")
    
    # Verificar archivos del proyecto
    print_header("VERIFICACI√ìN DE ARCHIVOS DEL PROYECTO")
    
    essential_files = [
        ('main.py', 'Archivo principal'),
        ('main.spec', 'Configuraci√≥n de PyInstaller'),
        ('requirements.txt', 'Lista de dependencias'),
        ('config.ini', 'Archivo de configuraci√≥n'),
        ('gui/main_window.py', 'Ventana principal'),
        ('gui/dialogs/initial_setup.py', 'Configuraci√≥n inicial'),
        ('gui/dialogs/advanced_settings_dialog.py', 'Configuraciones avanzadas'),
        ('utils/config_manager.py', 'Gestor de configuraci√≥n'),
        ('utils/logger.py', 'Sistema de logging'),
        ('utils/app_settings.py', 'Configuraciones de aplicaci√≥n'),
    ]
    
    for file_path, description in essential_files:
        exists = os.path.exists(file_path)
        print_check(f"{file_path}: {description}", exists)
        
    # Verificar directorios
    essential_dirs = [
        ('gui', 'Interfaz gr√°fica'),
        ('utils', 'Utilidades'),
        ('data', 'Datos de aplicaci√≥n'),
        ('logs', 'Archivos de log'),
        ('ico', 'Iconos'),
    ]
    
    for dir_path, description in essential_dirs:
        exists = os.path.exists(dir_path) and os.path.isdir(dir_path)
        print_check(f"{dir_path}/: {description}", exists)
    
    # Verificar permisos
    print_header("VERIFICACI√ìN DE PERMISOS")
    
    current_dir = os.getcwd()
    try:
        # Probar escritura
        test_file = os.path.join(current_dir, "test_write.tmp")
        with open(test_file, 'w') as f:
            f.write("test")
        os.remove(test_file)
        print_check("Permisos de escritura en directorio actual", True)
    except Exception as e:
        print_check("Permisos de escritura en directorio actual", False, f"Error: {e}")
    
    # Probar creaci√≥n de directorios
    try:
        test_dir = os.path.join(current_dir, "test_dir_tmp")
        os.makedirs(test_dir, exist_ok=True)
        os.rmdir(test_dir)
        print_check("Creaci√≥n de directorios", True)
    except Exception as e:
        print_check("Creaci√≥n de directorios", False, f"Error: {e}")
    
    # Verificar configuraci√≥n existente
    print_header("VERIFICACI√ìN DE CONFIGURACI√ìN")
    
    try:
        from utils.config_manager import ConfigManager
        config = ConfigManager()
        config.load_config()
        
        # Verificar secciones importantes
        sections = ['server', 'app', 'backup', 'logs']
        for section in sections:
            has_section = config.has_section(section)
            print_check(f"Secci√≥n [{section}] en config.ini", has_section)
        
        # Verificar configuraci√≥n del tema
        theme = config.get('app', 'theme', 'dark')
        print_check(f"Tema configurado", True, f"'{theme}'")
        
    except Exception as e:
        print_check("Carga de configuraci√≥n", False, f"Error: {e}")
    
    # Verificar configuraciones avanzadas
    try:
        from utils.app_settings import AppSettings
        from utils.logger import Logger
        
        logger = Logger()
        app_settings = AppSettings(ConfigManager(), logger)
        
        theme_mode = app_settings.get_setting('theme_mode', 'system')
        print_check(f"Configuraciones avanzadas", True, f"Tema: '{theme_mode}'")
        
    except Exception as e:
        print_check("Configuraciones avanzadas", False, f"Error: {e}")

def main():
    """Funci√≥n principal"""
    try:
        diagnose_system()
        
        print_header("RESUMEN")
        print("‚úÖ Diagn√≥stico completado")
        print("üìÑ Revisa los resultados arriba para identificar problemas")
        print("\nüí° RECOMENDACIONES:")
        print("   ‚Ä¢ Si hay m√≥dulos faltantes: pip install -r requirements.txt")
        print("   ‚Ä¢ Si CustomTkinter falla: pip install --upgrade customtkinter")
        print("   ‚Ä¢ Si hay errores de permisos: ejecuta como administrador")
        print("   ‚Ä¢ Si faltan archivos: verifica la integridad del proyecto")
        
    except Exception as e:
        print(f"\n‚ùå Error durante el diagn√≥stico: {e}")
        print(f"Traceback completo:")
        print(traceback.format_exc())
    
    print(f"\n{'='*60}")
    input("Presiona Enter para continuar...")

if __name__ == "__main__":
    main()
